Index: src/main/java/org/apache/jmeter/protocol/oauth/sampler/OAuthSampler.java
===================================================================
--- src/main/java/org/apache/jmeter/protocol/oauth/sampler/OAuthSampler.java	(revision 1267)
+++ src/main/java/org/apache/jmeter/protocol/oauth/sampler/OAuthSampler.java	(working copy)
@@ -31,11 +31,11 @@
 import java.util.zip.GZIPInputStream;
 
 import net.oauth.OAuth;
+import net.oauth.OAuth.Parameter;
 import net.oauth.OAuthAccessor;
 import net.oauth.OAuthConsumer;
 import net.oauth.OAuthException;
 import net.oauth.OAuthMessage;
-import net.oauth.OAuth.Parameter;
 import net.oauth.signature.OAuthSignatureMethod;
 import net.oauth.signature.RSA_SHA1;
 
@@ -59,7 +59,6 @@
 import org.apache.jmeter.protocol.http.util.HTTPArgument;
 import org.apache.jmeter.testelement.property.PropertyIterator;
 import org.apache.jorphan.logging.LoggingManager;
-import org.apache.jorphan.util.JOrphanUtils;
 import org.apache.log.Logger;
 
 /**
@@ -220,7 +219,7 @@
 			client = setupConnection(new URL(urlStr), httpMethod, res);
 			// Handle POST and PUT
 			if (isPost) {
-				String postBody = sendPostData(httpMethod);
+				String postBody = sendPostData(httpMethod);				
 				res.setQueryString(postBody);
 			}
 
@@ -304,7 +303,15 @@
 			err.setSampleLabel("Error: " + url.toString()); //$NON-NLS-1$
 			return err;
 		} finally {
-            JOrphanUtils.closeQuietly(instream);
+		    if (instream != null) {
+    		    try {
+                    instream.close();
+                } catch (IOException e) {
+                    // TODO Auto-generated catch block
+                    e.printStackTrace();
+                }
+		    }
+           // JOrphanUtils.closeQuietly(instream);
 			if (httpMethod != null) {
 				httpMethod.releaseConnection();
 			}
@@ -355,14 +362,20 @@
 	private String sendPostData(HttpMethod method) throws IOException {
  
 		String form;
-        
+//        log.debug("arguements: " + getArguments().getArgumentCount());
+//        log.debug("arguements: " + getArguments().getArgument(0).getValue());
 		if (useAuthHeader) {    
-		    form = OAuth.formEncode(nonOAuthParams);
-        } else {
+		    if (getArguments().getArgumentCount() == 1 
+	                && (getArguments().getArgument(0).getName() == null || "".equals(getArguments().getArgument(0).getName()))) {
+		        form = getArguments().getArgument(0).getValue();
+		    } else {		    
+		        form = OAuth.formEncode(nonOAuthParams);
+		    }
+        } else {            
         	form = OAuth.formEncode(message.getParameters());
+        	method.addRequestHeader(HEADER_CONTENT_TYPE, OAuth.FORM_ENCODED);
         }
-
-        method.addRequestHeader(HEADER_CONTENT_TYPE, OAuth.FORM_ENCODED);
+        
         method.addRequestHeader(HEADER_CONTENT_LENGTH, form.length() + ""); //$NON-NLS-1$
        
         if (method instanceof PostMethod || method instanceof PutMethod) {
@@ -418,33 +431,38 @@
 	    List<OAuth.Parameter> list = 
 	    	new ArrayList<OAuth.Parameter>(getArguments().getArgumentCount());
 	    
-		PropertyIterator args = getArguments().iterator();
-		while (args.hasNext()) {
-			HTTPArgument arg = (HTTPArgument) args.next().getObjectValue();
-			String parameterName = arg.getName();
-			String parameterValue = arg.getValue();
-			if (!arg.isAlwaysEncoded()) {
-                String urlContentEncoding = getContentEncoding();
-                if(urlContentEncoding == null || urlContentEncoding.length() == 0) {
-                    // Use the default encoding for urls 
-                    urlContentEncoding = EncoderCache.URL_ARGUMENT_ENCODING;
-                }
-				parameterName = URLDecoder.decode(parameterName,
-						urlContentEncoding);
-				parameterValue = URLDecoder.decode(parameterValue,
-						urlContentEncoding);
-			}
-			
-		   	list.add(new Parameter(parameterName, parameterValue));
-		}
-
+	    if (!(getArguments().getArgumentCount() == 1 
+	            && (getArguments().getArgument(0).getName() == null || "".equals(getArguments().getArgument(0).getName())))) {
+    		PropertyIterator args = getArguments().iterator();
+    		while (args.hasNext()) {
+    			HTTPArgument arg = (HTTPArgument) args.next().getObjectValue();
+    			String parameterName = arg.getName();
+    			String parameterValue = arg.getValue();
+    			if (!arg.isAlwaysEncoded()) {
+                    String urlContentEncoding = getContentEncoding();
+                    if(urlContentEncoding == null || urlContentEncoding.length() == 0) {
+                        // Use the default encoding for urls 
+                        urlContentEncoding = EncoderCache.URL_ARGUMENT_ENCODING;
+                    }
+    				parameterName = URLDecoder.decode(parameterName,
+    						urlContentEncoding);
+    				parameterValue = URLDecoder.decode(parameterValue,
+    						urlContentEncoding);
+    			}
+    
+    		   	list.add(new Parameter(parameterName, parameterValue));
+    		}
+	    }
     	OAuthMessage message = new OAuthMessage(method, url.toExternalForm(), list);
 	    
 	    message.addParameter(OAuth.OAUTH_SIGNATURE_METHOD,
 	    		getPropertyAsString(SIGNATURE_METHOD));
 	    
-	    if (accessor.accessToken != null && accessor.accessToken.length() > 0)
+	    if (accessor.accessToken != null && accessor.accessToken.length() > 0) {
 	    	message.addParameter(OAuth.OAUTH_TOKEN, accessor.accessToken);
+	    } else {
+	        message.addParameter(OAuth.OAUTH_TOKEN, "");
+	    }
 	    
     	// Sign the message
     	message.addRequiredParameters(accessor);
